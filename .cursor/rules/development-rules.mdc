---
alwaysApply: true
---
## 🔐 Authentication & Authorization Rules (Laravel 12.x)

### 1. **Laravel Sanctum (Laravel 12.x)**
- **MUST follow Laravel 12.x Sanctum documentation**: https://laravel.com/docs/12.x/sanctum
- **MUST use Sanctum middleware**: `auth:sanctum`
- **MUST implement proper token management**

### 2. **Authorization (Laravel 12.x)**
```php
// Use Laravel 12.x Gates and Policies
Gate::define('manage-students', function (User $user) {
    return $user->role === 'admin';
});

// Policy example
class StudentPolicy
{
    public function create(User $user): bool
    {
        return $user->hasRole('admin');
    }
}
```

---

## 🌐 API Design Rules (Laravel 12.x)

### 1. **API Resources (Laravel 12.x)**
```php
// Use Laravel 12.x API Resources
class StudentResource extends JsonResource
{
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'class' => new ClassResource($this->whenLoaded('class')),
        ];
    }
}
```

### 2. **Form Requests (Laravel 12.x)**
```php
// Use Laravel 12.x Form Request validation
class StoreStudentRequest extends FormRequest
{
    public function authorize(): bool
    {
        return $this->user()->can('create-student');
    }
    
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'email', 'unique:students'],
        ];
    }
}
```

---

## 📊 Database Design Rules (Laravel 12.x)

### 1. **Migrations (Laravel 12.x)**
```php
// Use Laravel 12.x migration features
return new class extends Migration
{
    public function up(): void
    {
        Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->foreignId('class_id')->constrained()->cascadeOnDelete();
            $table->timestamps();
            $table->softDeletes();
        });
    }
};
```

### 2. **Models (Laravel 12.x)**
```php
// Use Laravel 12.x model features
class Student extends Model
{
    use HasFactory, SoftDeletes;
    
    protected $fillable = [
        'name',
        'email',
        'class_id',
    ];
    
    protected $casts = [
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
    ];
    
    // Relationships
    public function class(): BelongsTo
    {
        return $this->belongsTo(ClassModel::class);
    }
}
```

### 3. **Enums (Laravel 12.x)**
```php
// Use PHP 8.1+ Enums with Laravel 12.x
enum AcademicYearStatus: string
{
    case ACTIVE = 'active';
    case CLOSED = 'closed';
    case DRAFT = 'draft';
}

enum StudentStatus: string
{
    case ACTIVE = 'active';
    case INACTIVE = 'inactive';
    case GRADUATED = 'graduated';
}
```

---

## 💼 Business Logic Rules (Laravel 12.x)

### 1. **Event-Driven Architecture (Laravel 12.x)**
```php
// Use Laravel 12.x Events and Listeners
class StudentPromoted
{
    public function __construct(
        public readonly Student $student,
        public readonly ClassModel $newClass
    ) {}
}

class GenerateStudentBill
{
    public function handle(StudentPromoted $event): void
    {
        // Generate bill logic
    }
}
```

### 2. **Jobs and Queues (Laravel 12.x)**
```php
// Use Laravel 12.x Job classes
class ProcessStudentBilling implements ShouldQueue
{
    public function __construct(
        private readonly Student $student
    ) {}
    
    public function handle(): void
    {
        // Process billing logic
    }
}
```

---

## 🧪 Testing Rules (Laravel 12.x)

### 1. **Pest Testing (Laravel 12.x Default)**
```php
// Use Pest (Laravel 12.x default testing framework)
test('admin can create academic year', function () {
    $admin = User::factory()->admin()->create();
    
    $response = $this->actingAs($admin)
        ->postJson('/api/v1/academic-years', [
            'name' => '2025-2026',
            'start_date' => '2025-01-01',
            'end_date' => '2025-12-31',
        ]);
    
    $response->assertStatus(201);
});

test('student cannot create academic year', function () {
    $student = User::factory()->student()->create();
    
    $response = $this->actingAs($student)
        ->postJson('/api/v1/academic-years', [
            'name' => '2025-2026',
        ]);
    
    $response->assertStatus(403);
});
```

### 2. **Feature Tests Structure**
```php
// Feature tests for API endpoints
describe('Academic Year API', function () {
    beforeEach(function () {
        $this->admin = User::factory()->admin()->create();
    });
    
    test('can list academic years', function () {
        // Test implementation
    });
    
    test('can create academic year', function () {
        // Test implementation
    });
});
```

---

## 📝 Laravel 12.x Code Style Rules

### 1. **PHP 8.1+ Features**
```php
// Use constructor property promotion
class StudentService
{
    public function __construct(
        private readonly StudentRepository $repository,
        private readonly BillingService $billingService
    ) {}
}

// Use readonly properties for immutable data
class StudentDTO
{
    public function __construct(
        public readonly string $name,
        public readonly string $email,
        public readonly int $classId
    ) {}
}
```

### 2. **Laravel Pint (Code Formatting)**
```php
// MUST use Laravel Pint for code formatting
// Run: ./vendor/bin/pint
// Configuration in pint.json
{
    "preset": "laravel"
}
```

### 3. **Type Declarations**
```php
// MUST use strict types
declare(strict_types=1);

// MUST use return type declarations
public function createStudent(array $data): Student
{
    return $this->repository->create($data);
}
```

---

## 🚀 Laravel 12.x Specific Features

### 1. **Artisan Commands (Laravel 12.x)**
```php
// Use Laravel 12.x command features
class PromoteStudentsCommand extends Command
{
    protected $signature = 'students:promote {academicYear}';
    
    public function handle(): int
    {
        $this->info('Promoting students...');
        return Command::SUCCESS;
    }
}
```

### 2. **Service Providers (Laravel 12.x)**
```php
// Register services following Laravel 12.x patterns
class SchoolServiceProvider extends ServiceProvider
{
    public function register(): void
    {
        $this->app->bind(StudentRepository::class);
        $this->app->bind(BillingService::class);
    }
    
    public function boot(): void
    {
        // Boot logic
    }
}
```

---

## 🔧 Development Workflow (Laravel 12.x)

### 1. **Laravel Sail (Development Environment)**
```bash
# Use Laravel Sail for development
./vendor/bin/sail up
./vendor/bin/sail artisan migrate
./vendor/bin/sail artisan test
```

### 2. **Artisan Commands**
```bash
# Model creation with Laravel 12.x
php artisan make:model Student -mfsc
# -m: migration, -f: factory, -s: seeder, -c: controller

# API Resource creation
php artisan make:resource StudentResource
php artisan make:resource StudentCollection

# Form Request creation
php artisan make:request StoreStudentRequest
```

---

## 📚 Laravel 12.x Documentation Compliance

### 1. **MUST Reference Official Documentation**
- **Installation**: https://laravel.com/docs/12.x/installation
- **Configuration**: https://laravel.com/docs/12.x/configuration
- **Routing**: https://laravel.com/docs/12.x/routing
- **Controllers**: https://laravel.com/docs/12.x/controllers
- **Models**: https://laravel.com/docs/12.x/eloquent
- **Migrations**: https://laravel.com/docs/12.x/migrations
- **Validation**: https://laravel.com/docs/12.x/validation
- **Authentication**: https://laravel.com/docs/12.x/authentication
- **Authorization**: https://laravel.com/docs/12.x/authorization
- **Testing**: https://laravel.com/docs/12.x/testing

### 2. **Laravel 12.x Best Practices**
- **MUST follow Laravel conventions** as documented
- **MUST use Laravel's built-in features** before custom solutions
- **MUST stay updated** with Laravel 12.x documentation
- **MUST use Laravel's recommended patterns**

---

## ✅ Laravel 12.x Compliance Checklist

### For Each Feature:
- [ ] Follows Laravel 12.x documentation patterns
- [ ] Uses appropriate Laravel 12.x features
- [ ] Implements proper error handling
- [ ] Includes comprehensive tests (Pest)
- [ ] Uses Laravel Pint for formatting
- [ ] Implements proper authorization
- [ ] Uses type declarations
- [ ] Follows Laravel naming conventions
- [ ] Uses Laravel's built-in validation
- [ ] Implements proper API resources

---

**📌 Laravel 12.x Reference: Always consult https://laravel.com/docs/12.x/ for the most up-to-date patterns and best practices!** 